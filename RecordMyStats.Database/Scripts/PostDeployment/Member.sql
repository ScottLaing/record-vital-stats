--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [Member] ON

DECLARE @mergeOutput TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO [Member] AS [Target]
USING (VALUES
  (1,N'Jose827',N'Raul600',N'Quintero284',1,N'JoseRaul88233424.footballfan','2001-02-05',N'M',N'E8E3C641F734046DAA36A901569E16D7B4FAE67D258E7B67489683D15FD5CDFF',N'92373',N'Spain',NULL,NULL,NULL)
) AS [Source] ([Id],[FirstName],[LastName],[MiddleName],[IsActive],[Email],[DateOfBirth],[Sex],[Password],[Zip],[Country],[CreateDate],[ModDate],[ModBy])
ON ([Target].[Id] = [Source].[Id])
WHEN MATCHED AND (
	NULLIF([Source].[FirstName], [Target].[FirstName]) IS NOT NULL OR NULLIF([Target].[FirstName], [Source].[FirstName]) IS NOT NULL OR 
	NULLIF([Source].[LastName], [Target].[LastName]) IS NOT NULL OR NULLIF([Target].[LastName], [Source].[LastName]) IS NOT NULL OR 
	NULLIF([Source].[MiddleName], [Target].[MiddleName]) IS NOT NULL OR NULLIF([Target].[MiddleName], [Source].[MiddleName]) IS NOT NULL OR 
	NULLIF([Source].[IsActive], [Target].[IsActive]) IS NOT NULL OR NULLIF([Target].[IsActive], [Source].[IsActive]) IS NOT NULL OR 
	NULLIF([Source].[Email], [Target].[Email]) IS NOT NULL OR NULLIF([Target].[Email], [Source].[Email]) IS NOT NULL OR 
	NULLIF([Source].[DateOfBirth], [Target].[DateOfBirth]) IS NOT NULL OR NULLIF([Target].[DateOfBirth], [Source].[DateOfBirth]) IS NOT NULL OR 
	NULLIF([Source].[Sex], [Target].[Sex]) IS NOT NULL OR NULLIF([Target].[Sex], [Source].[Sex]) IS NOT NULL OR 
	NULLIF([Source].[Password], [Target].[Password]) IS NOT NULL OR NULLIF([Target].[Password], [Source].[Password]) IS NOT NULL OR 
	NULLIF([Source].[Zip], [Target].[Zip]) IS NOT NULL OR NULLIF([Target].[Zip], [Source].[Zip]) IS NOT NULL OR 
	NULLIF([Source].[Country], [Target].[Country]) IS NOT NULL OR NULLIF([Target].[Country], [Source].[Country]) IS NOT NULL OR 
	NULLIF([Source].[CreateDate], [Target].[CreateDate]) IS NOT NULL OR NULLIF([Target].[CreateDate], [Source].[CreateDate]) IS NOT NULL OR 
	NULLIF([Source].[ModDate], [Target].[ModDate]) IS NOT NULL OR NULLIF([Target].[ModDate], [Source].[ModDate]) IS NOT NULL OR 
	NULLIF([Source].[ModBy], [Target].[ModBy]) IS NOT NULL OR NULLIF([Target].[ModBy], [Source].[ModBy]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[FirstName] = [Source].[FirstName], 
  [Target].[LastName] = [Source].[LastName], 
  [Target].[MiddleName] = [Source].[MiddleName], 
  [Target].[IsActive] = [Source].[IsActive], 
  [Target].[Email] = [Source].[Email], 
  [Target].[DateOfBirth] = [Source].[DateOfBirth], 
  [Target].[Sex] = [Source].[Sex], 
  [Target].[Password] = [Source].[Password], 
  [Target].[Zip] = [Source].[Zip], 
  [Target].[Country] = [Source].[Country], 
  [Target].[CreateDate] = [Source].[CreateDate], 
  [Target].[ModDate] = [Source].[ModDate], 
  [Target].[ModBy] = [Source].[ModBy]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([Id],[FirstName],[LastName],[MiddleName],[IsActive],[Email],[DateOfBirth],[Sex],[Password],[Zip],[Country],[CreateDate],[ModDate],[ModBy])
 VALUES([Source].[Id],[Source].[FirstName],[Source].[LastName],[Source].[MiddleName],[Source].[IsActive],[Source].[Email],[Source].[DateOfBirth],[Source].[Sex],[Source].[Password],[Source].[Zip],[Source].[Country],[Source].[CreateDate],[Source].[ModDate],[Source].[ModBy])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE
OUTPUT $action INTO @mergeOutput;

DECLARE @mergeError int
 , @mergeCount int, @mergeCountIns int, @mergeCountUpd int, @mergeCountDel int
SELECT @mergeError = @@ERROR
SELECT @mergeCount = COUNT(1), @mergeCountIns = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [Member]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[Member] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel,0) AS VARCHAR(100)) + ')' ;
 END
GO



SET IDENTITY_INSERT [Member] OFF
SET NOCOUNT OFF
GO
