--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [BloodPressure] ON

DECLARE @mergeOutput TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO [BloodPressure] AS [Target]
USING (SELECT [Id],[MemberId],[RecordingDate],[Systolic],[Diastolic],[Units],[WhenTaken],[IsActive],[CreateDate] FROM [BloodPressure] WHERE 1 = 0 -- Empty dataset (source table contained no rows at time of MERGE generation) 
) AS [Source] ([Id],[MemberId],[RecordingDate],[Systolic],[Diastolic],[Units],[WhenTaken],[IsActive],[CreateDate])
ON ([Target].[Id] = [Source].[Id])
WHEN MATCHED AND (
	NULLIF([Source].[MemberId], [Target].[MemberId]) IS NOT NULL OR NULLIF([Target].[MemberId], [Source].[MemberId]) IS NOT NULL OR 
	NULLIF([Source].[RecordingDate], [Target].[RecordingDate]) IS NOT NULL OR NULLIF([Target].[RecordingDate], [Source].[RecordingDate]) IS NOT NULL OR 
	NULLIF([Source].[Systolic], [Target].[Systolic]) IS NOT NULL OR NULLIF([Target].[Systolic], [Source].[Systolic]) IS NOT NULL OR 
	NULLIF([Source].[Diastolic], [Target].[Diastolic]) IS NOT NULL OR NULLIF([Target].[Diastolic], [Source].[Diastolic]) IS NOT NULL OR 
	NULLIF([Source].[Units], [Target].[Units]) IS NOT NULL OR NULLIF([Target].[Units], [Source].[Units]) IS NOT NULL OR 
	NULLIF([Source].[WhenTaken], [Target].[WhenTaken]) IS NOT NULL OR NULLIF([Target].[WhenTaken], [Source].[WhenTaken]) IS NOT NULL OR 
	NULLIF([Source].[IsActive], [Target].[IsActive]) IS NOT NULL OR NULLIF([Target].[IsActive], [Source].[IsActive]) IS NOT NULL OR 
	NULLIF([Source].[CreateDate], [Target].[CreateDate]) IS NOT NULL OR NULLIF([Target].[CreateDate], [Source].[CreateDate]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[MemberId] = [Source].[MemberId], 
  [Target].[RecordingDate] = [Source].[RecordingDate], 
  [Target].[Systolic] = [Source].[Systolic], 
  [Target].[Diastolic] = [Source].[Diastolic], 
  [Target].[Units] = [Source].[Units], 
  [Target].[WhenTaken] = [Source].[WhenTaken], 
  [Target].[IsActive] = [Source].[IsActive], 
  [Target].[CreateDate] = [Source].[CreateDate]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([Id],[MemberId],[RecordingDate],[Systolic],[Diastolic],[Units],[WhenTaken],[IsActive],[CreateDate])
 VALUES([Source].[Id],[Source].[MemberId],[Source].[RecordingDate],[Source].[Systolic],[Source].[Diastolic],[Source].[Units],[Source].[WhenTaken],[Source].[IsActive],[Source].[CreateDate])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE
OUTPUT $action INTO @mergeOutput;

DECLARE @mergeError int
 , @mergeCount int, @mergeCountIns int, @mergeCountUpd int, @mergeCountDel int
SELECT @mergeError = @@ERROR
SELECT @mergeCount = COUNT(1), @mergeCountIns = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [BloodPressure]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[BloodPressure] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel,0) AS VARCHAR(100)) + ')' ;
 END
GO



SET IDENTITY_INSERT [BloodPressure] OFF
SET NOCOUNT OFF
GO
