--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [Session] ON

DECLARE @mergeOutput TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO [Session] AS [Target]
USING (VALUES
  (1,1007,N'4D9C2D536A0D46FEACD144835727036E','2022-07-01T03:42:48.3333333','2022-07-02T03:42:48.3333333',N'win-native',1)
 ,(2,2003,N'498AD64351ED45138A3798E9A2D6EBCD','2022-07-02T15:09:36.9133333','2022-07-03T15:09:36.9133333',N'win-native',1)
 ,(3,2004,N'C96C47F7A55D4F5BBEEAEFB758B7CBCA','2022-07-02T15:20:04.8166667','2022-07-03T15:20:04.8166667',N'win-native',0)
) AS [Source] ([Id],[MemberId],[SessionKey],[CreateDate],[ExpiresDate],[Platform],[IsActive])
ON ([Target].[Id] = [Source].[Id])
WHEN MATCHED AND (
	NULLIF([Source].[MemberId], [Target].[MemberId]) IS NOT NULL OR NULLIF([Target].[MemberId], [Source].[MemberId]) IS NOT NULL OR 
	NULLIF([Source].[SessionKey], [Target].[SessionKey]) IS NOT NULL OR NULLIF([Target].[SessionKey], [Source].[SessionKey]) IS NOT NULL OR 
	NULLIF([Source].[CreateDate], [Target].[CreateDate]) IS NOT NULL OR NULLIF([Target].[CreateDate], [Source].[CreateDate]) IS NOT NULL OR 
	NULLIF([Source].[ExpiresDate], [Target].[ExpiresDate]) IS NOT NULL OR NULLIF([Target].[ExpiresDate], [Source].[ExpiresDate]) IS NOT NULL OR 
	NULLIF([Source].[Platform], [Target].[Platform]) IS NOT NULL OR NULLIF([Target].[Platform], [Source].[Platform]) IS NOT NULL OR 
	NULLIF([Source].[IsActive], [Target].[IsActive]) IS NOT NULL OR NULLIF([Target].[IsActive], [Source].[IsActive]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[MemberId] = [Source].[MemberId], 
  [Target].[SessionKey] = [Source].[SessionKey], 
  [Target].[CreateDate] = [Source].[CreateDate], 
  [Target].[ExpiresDate] = [Source].[ExpiresDate], 
  [Target].[Platform] = [Source].[Platform], 
  [Target].[IsActive] = [Source].[IsActive]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([Id],[MemberId],[SessionKey],[CreateDate],[ExpiresDate],[Platform],[IsActive])
 VALUES([Source].[Id],[Source].[MemberId],[Source].[SessionKey],[Source].[CreateDate],[Source].[ExpiresDate],[Source].[Platform],[Source].[IsActive])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE
OUTPUT $action INTO @mergeOutput;

DECLARE @mergeError int
 , @mergeCount int, @mergeCountIns int, @mergeCountUpd int, @mergeCountDel int
SELECT @mergeError = @@ERROR
SELECT @mergeCount = COUNT(1), @mergeCountIns = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [Session]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[Session] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel,0) AS VARCHAR(100)) + ')' ;
 END
GO



SET IDENTITY_INSERT [Session] OFF
SET NOCOUNT OFF
GO
