--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [Note] ON

DECLARE @mergeOutput TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO [Note] AS [Target]
USING (VALUES
  (1,N'msgs 1/20/2023 6:24:31 PM',N'EAAAAElJTdMMWcSlrHlya512345678iDG5Cz4DjTIWp9+vvY4XwRNrbg8zM3CfaG1tEkasJH+vij/AzlKN5tCFytbUllxkf9AlH85kwtM7HLtmeiitIL0j14DKWp6QyBqt/3Hle+2MG4CP53yOAkUgNXK+fYgtRjOT9Z01n1CDHLyTIw1aBB8y+6LEtyi02MFlJkFyFVCkfCFoQ5ukjeItGr6l3/A28ttukv3CAKQEIG2RX4+hao4Ki8njNYnPG9DVyKe4AC39XmLD/miIwwZGFLpBsLSusg+IylnjZ5nCTdTBZi2eNCatSyKAt0UZ+VkDEpDBcXiYbeZB9Xjxr0mI5CwZkVaCrbmbxZ/rm0/3PKlGaFLn3Di6rhZ9DSxC0yPw68LKVh6/v9LcoDrNBzZXItbR03ccAQMNV9ACcWYqlGoS5GBxWlzAz12eFzIOkoYREBSjGI9VspO0yGBB8d8bnFNYfHm3u9nJ4FrtNDPkbA6C2rh+w9Cpy46goQVGaRc7kMzqt5487ka/UwtN3qvKcBy3J+gvas/9ElEzPY07I+BBYiqZgM4AdgGZSABR9kAEinHpKFTIQODnW443cJlfCALOv/MoKAlgfCeW5kXFduvngrSzKg3hrv0xB3xAQjxhbcieZW5qZfUZS9FsarpU72ooWOWT47K1QWFr1UIOH8E3MfDCIMdOCNhsmHiiNDOGN5HzSguTyggNXVG194UDProhdboQx+62N8yTkoMaJRDw5W2JJ40GJm5jQM2CDP8tsatn2NCV3HIBM2Gvt6YjhBxMNZUByLtIqpKQ2EOphVLy8j0vnT4fnlLMc13vROmuz/LIsJnBcqwa4Ux0j9sM3raRiz9a0qAvoz+/YDfbU0kpe7Pn9fTlzt8DtKZPEtjTIK6wVMcE4yftOzwI6zoTWODRwz+TiI7UaT56u5tb3P+RhrEskL22uM85Ed0=','2023-01-21T00:24:31.7366667',N'slaing',1,N'SMS',N'',N'EA5493F2-DAF0-42A5-82A8-4C5B0B35CA53',1,3042)
) AS [Source] ([Id],[Description],[FullText],[Created],[ModBy],[IsActive],[Key1],[Key2],[Salt],[IsEncrypted],[MemberId])
ON ([Target].[Id] = [Source].[Id])
WHEN MATCHED AND (
	NULLIF([Source].[Description], [Target].[Description]) IS NOT NULL OR NULLIF([Target].[Description], [Source].[Description]) IS NOT NULL OR 
	NULLIF([Source].[FullText], [Target].[FullText]) IS NOT NULL OR NULLIF([Target].[FullText], [Source].[FullText]) IS NOT NULL OR 
	NULLIF([Source].[Created], [Target].[Created]) IS NOT NULL OR NULLIF([Target].[Created], [Source].[Created]) IS NOT NULL OR 
	NULLIF([Source].[ModBy], [Target].[ModBy]) IS NOT NULL OR NULLIF([Target].[ModBy], [Source].[ModBy]) IS NOT NULL OR 
	NULLIF([Source].[IsActive], [Target].[IsActive]) IS NOT NULL OR NULLIF([Target].[IsActive], [Source].[IsActive]) IS NOT NULL OR 
	NULLIF([Source].[Key1], [Target].[Key1]) IS NOT NULL OR NULLIF([Target].[Key1], [Source].[Key1]) IS NOT NULL OR 
	NULLIF([Source].[Key2], [Target].[Key2]) IS NOT NULL OR NULLIF([Target].[Key2], [Source].[Key2]) IS NOT NULL OR 
	NULLIF([Source].[Salt], [Target].[Salt]) IS NOT NULL OR NULLIF([Target].[Salt], [Source].[Salt]) IS NOT NULL OR 
	NULLIF([Source].[IsEncrypted], [Target].[IsEncrypted]) IS NOT NULL OR NULLIF([Target].[IsEncrypted], [Source].[IsEncrypted]) IS NOT NULL OR 
	NULLIF([Source].[MemberId], [Target].[MemberId]) IS NOT NULL OR NULLIF([Target].[MemberId], [Source].[MemberId]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[Description] = [Source].[Description], 
  [Target].[FullText] = [Source].[FullText], 
  [Target].[Created] = [Source].[Created], 
  [Target].[ModBy] = [Source].[ModBy], 
  [Target].[IsActive] = [Source].[IsActive], 
  [Target].[Key1] = [Source].[Key1], 
  [Target].[Key2] = [Source].[Key2], 
  [Target].[Salt] = [Source].[Salt], 
  [Target].[IsEncrypted] = [Source].[IsEncrypted], 
  [Target].[MemberId] = [Source].[MemberId]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([Id],[Description],[FullText],[Created],[ModBy],[IsActive],[Key1],[Key2],[Salt],[IsEncrypted],[MemberId])
 VALUES([Source].[Id],[Source].[Description],[Source].[FullText],[Source].[Created],[Source].[ModBy],[Source].[IsActive],[Source].[Key1],[Source].[Key2],[Source].[Salt],[Source].[IsEncrypted],[Source].[MemberId])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE
OUTPUT $action INTO @mergeOutput;

DECLARE @mergeError int
 , @mergeCount int, @mergeCountIns int, @mergeCountUpd int, @mergeCountDel int
SELECT @mergeError = @@ERROR
SELECT @mergeCount = COUNT(1), @mergeCountIns = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [Note]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[Note] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel,0) AS VARCHAR(100)) + ')' ;
 END
GO



SET IDENTITY_INSERT [Note] OFF
SET NOCOUNT OFF
GO
